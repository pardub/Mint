+TITLE: TEST CONFIG
#+AUTHOR: Test
#+DESCRIPTION: Personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#straight][STRAIGHT]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#backup][BACKUP]]
- [[#company][COMPANY]]
- [[#corfu][CORFU]]
- [[#dashboard][DASHBOARD]]
- [[#deadgrep][DEADGREP]]
- [[#diminish][DIMINISH]]
- [[#dired-need-to-be-fixed][DIRED (NEED TO BE FIXED)]]
- [[#elfeed][ELFEED]]
- [[#esup][ESUP]]
- [[#evil][EVIL]]
- [[#flycheck][FLYCHECK]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#general-keybindings][GENERAL KEYBINDINGS]]
- [[#git-programs][GIT PROGRAMS]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][MAGIT]]
- [[#kind-icons-corfu][KIND ICONS CORFU]]
- [[#helm][HELM]]
- [[#helpful][HELPFUL]]
- [[#highlight-todo][HIGHLIGHT TODO]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#python][Python]]
- [[#laptop-config][LAPTOP CONFIG]]
- [[#modeline][MODELINE]]
- [[#modern-minibuffer-packages][Modern Minibuffer Packages]]
- [[#minibuffer-escape][MINIBUFFER ESCAPE]]
- [[#move-windows][MOVE WINDOWS]]
- [[#neotree][NEOTREE]]
- [[#org-mode][ORG MODE]]
  - [[#diminish-org-indent-mode][Diminish Org Indent Mode]]
  - [[#org-bullets][Org-Bullets]]
  - [[#org-level-headers][Org Level Headers]]
  - [[#org-tempo][Org-Tempo]]
  - [[#preserve-indentation-on-org-babel-tangle][Preserve Indentation On Org-Babel-Tangle]]
  - [[#toc-org][Toc-Org]]
- [[#pdfs][PDFs]]
- [[#perspective][PERSPECTIVE]]
- [[#projectile][PROJECTILE]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#riprep][RIPREP]]
- [[#sane-default][SANE DEFAULT]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#sudo-edit][SUDO EDIT]]
- [[#themes][THEMES]]
  - [[#themes-doom][THEMES DOOM]]
  - [[#themes-prot][THEMES PROT]]
- [[#tldr][TLDR]]
- [[#which-key][WHICH-KEY]]
- [[#test][TEST]]

* STRAIGHT

#+BEGIN_SRC emacs-lisp

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))


;; Ensure use-package is configured to use straight.el by default
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
;;(setq straight-check-for-modifications '(watch-files find-when-checking)) ;; added 14/05/2024 to fix slow start.
(setq init-file-debug t)

(provide 'straight-setup)

#+END_SRC

#+BEGIN_SRC emacs-lisp

;; Set the user-emacs-directory to the custom location
;;(setq user-emacs-directory "~/.config/emacs_test/")

;; Set the Eshell directory and rc script location
;;(setq eshell-directory-name "~/.config/emacs_test/eshell")
;;(setq eshell-rc-script "~/.config/emacs_test/eshell/rc")

;; Load the rest of your Emacs configuration
;;(when (file-exists-p (expand-file-name "init.el" user-emacs-directory))
;;  (load-file (expand-file-name "init.el" user-emacs-directory)))

#+END_SRC

* ALL THE ICONS

#+BEGIN_SRC emacs-lisp

(use-package all-the-icons
  :ensure t  ;; ensure the package is installed from the package archive
  :if (display-graphic-p)  ;; only load if emacs is running in a graphical environment
  :config
  ;; automatically install the fonts if they're not already installed
  ;;in order for the icons to work it is very important that you install the resource fonts included in this package
  (unless (find-font (font-spec :name "all-the-icons"))
     (all-the-icons-install-fonts t)))

(use-package all-the-icons-dired
  :ensure t
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t)))
  :config
  (setq all-the-icons-dired-monochrome nil)) ; this ensures icons are in color

#+END_SRC

* BACKUP
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~".  This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+BEGIN_SRC emacs-lisp

(setq backup-directory-alist '((".*" . "~/.local/share/Trash/emacs_files")))

#+END_SRC

* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to cmplete the common part.

#+BEGIN_SRC emacs-lisp

;; (use-package company
;;   :defer 2
;;   :diminish
;;   :custom
;;   (company-begin-commands '(self-insert-command))
;;   (company-idle-delay .1)
;;   (company-minimum-prefix-length 2)
;;   (company-show-numbers t)
;;   (company-tooltip-align-annotations 't)
;;   (global-company-mode t))

;; (use-package company-box
;;   :after company
;;   :diminish
;;   :hook (company-mode . company-box-mode))

#+END_SRC

* CORFU
Displays completion candidates directly inline, in the buffer, rather than in a separate popup menu.
#+BEGIN_SRC emacs-lisp

(use-package corfu
  ;; Optionally use TAB for cycling, default is `corfu-complete`.
  ;; :bind (:map corfu-map
  ;;        ("TAB" . corfu-next)
  ;;        ([tab] . corfu-next)
  ;;        ("S-TAB" . corfu-previous)
  ;;        ([backtab] . corfu-previous))

  :custom
  (corfu-echo-documentation 0.25)

  :init
  (global-corfu-mode)
  (setq corfu-auto t))


;; Optionally enable the annotations
;; (use-package corfu-doc
;;   :ensure t
;;   :hook (corfu-mode . corfu-doc-mode))
;; Set the completion style
(setq completion-styles '(basic partial-completion flex))

;; Enable cycling for `corfu-next` and `corfu-previous`
(setq corfu-cycle t)

;; Enable Corfu inline previews
(setq corfu-preview-current nil)

;; Set the delay for Corfu to show completions
(setq corfu-auto-delay 0.2)

;; Show the documentation popup
(setq corfu-echo-documentation t)

#+END_SRC

* DASHBOARD

#+BEGIN_SRC emacs-lisp

(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/.config/emacs_test/images/dtmacs-logo.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))

#+END_SRC

* DEADGREP

#+BEGIN_SRC emacs-lisp

;;(use-package deadgrep )
;;(global-set-key (kbd "<f5>") #'deadgrep)

#+END_SRC

* DIMINISH
Diminish cleans up the mode line by hiding or shortening minor mode indicators.
#+BEGIN_SRC emacs-lisp

(use-package diminish)

#+END_SRC

* DIRED (NEED TO BE FIXED)

#+BEGIN_SRC emacs-lisp

(use-package dired-open
  :after dired ;; ensure it loads after dired
  :config
  (setq dired-open-extensions '(("gif" . "display")
                                ("jpg" . "display")
                                ("png" . "display")
                                ("mkv" . "vlc")
                                ("mp4" . "vlc"))))

(use-package dired
  :straight (:type built-in)) ;; dired is part of Emacs, no need to download
  ;;:hook ((dired-mode . all-the-icons-dired-mode)))
        ;; (dired-mode . (lambda () (dired-hide-details-mode t)))))

;; (evil-define-key 'normal dired-mode-map  (kbd "M-RET") 'dired-display-file) ;; added 15/05/2024 TESTING

(use-package peep-dired ;; to preview the content of what you're scrolling dowm in Dired
  :after dired ;; ensure it loads after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "M-RET") 'dired-display-file)
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)

;; split windows for previews
(defun my-peep-dired-setup ()
  "Set up environment for peep-dired with a cloned buffer in a split window."
  (interactive)
  ;; Only split the window if it's currently a single window
  (when (one-window-p)
    (split-window-right))  ; Split the window vertically
  ;; Clone the current buffer as an indirect buffer and move it to the right window
  (let ((original-buffer (current-buffer)))
    (other-window 1)  ; Move to the right window
    (switch-to-buffer (clone-indirect-buffer nil nil))
    (switch-to-buffer-other-window original-buffer))  ; Return to the original buffer in the left window
  ;; Set thresholds for window splitting to nil, discouraging further splitting
  (setq split-width-threshold 40 t
        split-height-threshold nil)
  ;; Normalize keymaps as needed for Evil mode
  (evil-normalize-keymaps))

(advice-add 'peep-dired :before 'my-peep-dired-setup)

;; (setq dired-listing-switches "-ahl -v --group-directories-first") ;; Customize Dired listing


;; Temporarily set `DEL` to `backward-kill-word` in the `find-file` minibuffer context.
(defun my-local-find-file-setup ()
  "Set up local keybinding for `find-file` in `vertico`."
  (when (eq this-command 'find-file)
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "DEL") 'backward-kill-word)
      (use-local-map (make-composed-keymap map (current-local-map))))))

(add-hook 'minibuffer-setup-hook 'my-local-find-file-setup)

#+END_SRC

* ELFEED

#+BEGIN_SRC emacs-lisp

(use-package elfeed
  :config
  (setq elfeed-search-feed-face ":foreground #ffffff :weight bold"
        elfeed-feeds (quote
                       (("https://www.lemonde.fr/rss/une.xml" news)
                        ("https://www.lefigaro.fr/rss/figaro_flash-actu.xml" news)
                        ("https://www.eff.org/rss/updates.xml" eff)
			  ("https://stallman.org/rss/rss.xml" news)
                        ("https://reliefweb.int/jobs/rss.xml?advanced-search=%28C158.C241%29" relief jobs ukraine)))))

(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
 (setq elfeed-goodies/entry-pane-size 0.5))

#+END_SRC

* ESUP
[[https://github.com/jschaf/esup][esup]] is a benchmark Emacs Startup time.

#+BEGIN_SRC emacs-lisp

(use-package esup
  :ensure t)

  #+END_SRC

* EVIL
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi/vim layer for Emacs.  Because...let's face it.  The Vim keybindings are just plain better.

#+BEGIN_SRC emacs-lisp

(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          ;;evil-want-minibuffer t
          evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
    (evil-mode))

(use-package evil-collection
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here
  ;; for documentation purposes in case you need it.
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

(use-package evil-tutor)

;; Using RETURN to follow links in Org/Evil
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)

#+END_SRC

* FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files.  Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+BEGIN_SRC emacs-lisp

(use-package flycheck
  :defer t
  :diminish
  :init (global-flycheck-mode))

 #+END_SRC

* FONTS
Defining the various fonts that Emacs will use.
** Setting the Font Face

#+BEGIN_SRC emacs-lisp

(set-face-attribute 'default nil
  :font "JetBrainsMonoNerdFont"
  :height 90
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 90
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrainsMonoNerdFont"
  :height 90
  :weight 'bold)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
;;(add-to-list 'default-frame-alist '(font . "JetBrainsMonoNerdFont-11"))
;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)

#+END_SRC

** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

#+END_SRC

* TODO GENERAL KEYBINDINGS

#+BEGIN_SRC emacs-lisp

(use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer dt/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (dt/leader-keys
    "SPC" '(execute-extended-command :wk "Vertico M-x") ;; SPC SPC is equal to M-x
    "." '(find-file :wk "Find file")
    "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
    "TAB TAB" '(comment-line :wk "Comment lines")
    "u" '(universal-argument :wk "Universal argument"))

  (dt/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b o" '(consult-buffer :wk "Consult buffer")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  (dt/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d f" '(wdired-finish-edit :wk "Writable dired finish edit")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired")
    "d w" '(wdired-change-to-wdired-mode :wk "Writable dired"))

  (dt/leader-keys
    "e" '(:ignore t :wk "Ediff/Eshell/Eval/EWW")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e f" '(ediff-files :wk "Run ediff on a pair of files")
    "e F" '(ediff-files3 :wk "Run ediff on three files")
    "e h" '(counsel-esh-history :which-key "Eshell history")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e R" '(eww-reload :which-key "Reload current page in EWW")
    "e s" '(eshell :which-key "Eshell")
    "e w" '(eww :which-key "EWW emacs web wowser"))

  (dt/leader-keys
    "f" '(:ignore t :wk "Files")
    "f c" '((lambda () (interactive)
              (find-file "~/.config/emacs_test/config.org"))
            :wk "Open emacs config.org")
    "f e" '((lambda () (interactive)
              (dired "~/.config/emacs_test/"))
            :wk "Open user-emacs-directory in dired")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f g" '(consult-ripgrep :wk "Search for string current file")
    "f i" '((lambda () (interactive)
              (find-file "~/.config/emacs_test/init.el"))
            :wk "Open emacs init.el")
    "f j" '(consult-find :wk "Jump to a file below current directory")
    "f l" '(consult-locate :wk "Locate a file")
    "f r" '(consult-recent-file :wk "Find recent files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file"))

 (dt/leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" '(apropos-command :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h h" '(help-for-help :wk "Help for help")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h o" '(describe-symbol :wk "Describe symbol")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
                (load-file "~/.config/emacs_test/init.el"))
              :wk "Reload emacs config")
    "h t" '(load-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (dt/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (dt/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (dt/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))

  (dt/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    "o e" '(elfeed :wk "Elfeed RSS")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o F" '(select-frame-by-name :wk "Select frame by name"))

  ;; projectile-command-map already has a ton of bindings
  ;; set for us, so no need to specify each individually.
  (dt/leader-keys
    "p" '(projectile-command-map :wk "Projectile"))

  (dt/leader-keys
    "r" '(:ignore t :wk "Radio")
    "r p" '(eradio-play :wk "Eradio play")
    "r s" '(eradio-stop :wk "Eradio stop")
    "r t" '(eradio-toggle :wk "Eradio toggle"))


  (dt/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s o" '(pdf-occur :wk "Pdf search lines matching STRING")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s w" '(woman :wk "Similar to man but doesn't require man"))

  (dt/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t o" '(org-mode :wk "Toggle org mode")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))

  (dt/leader-keys
    "w" '(:ignore t :wk "Windows/Words")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right")
    ;; Words
    "w d" '(downcase-word :wk "Downcase word")
    "w u" '(upcase-word :wk "Upcase word")
    "w =" '(count-words :wk "Count words/lines for buffer"))
)

#+END_SRC

* GIT PROGRAMS

** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file's commits.  'SPC g t' will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use 'CTRL-j' and 'CTRL-k' to move backwards and forwards through the commits.

#+BEGIN_SRC emacs-lisp

(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)

#+END_SRC

** MAGIT
[[https://magit.vc/manual/][Magit]] is a full-featured git client for Emacs.

#+BEGIN_SRC emacs-lisp

(use-package magit)

#+END_SRC

* KIND ICONS CORFU

#+BEGIN_SRC emacs-lisp

(use-package kind-icon
  :ensure t
  :config
  (add-hook 'my-completion-ui-mode-hook
   	    (lambda ()
   	      (setq completion-in-region-function
   		    (kind-icon-enhance-completion
   		     completion-in-region-function)))))
#+END_SRC

* HELM

#+BEGIN_SRC emacs-lisp

;; (use-package helm
;;  :bind (("M-x" . helm-M-x)
;;         ("C-x C-f" . helm-find-files)
;;         ("C-x b" . helm-mini)
;;         ("M-y" . helm-show-kill-ring))
;;  :config
;;  (helm-mode 1))


#+END_SRC

* HELPFUL

#+BEGIN_SRC emacs-lisp

;; (use-package helpful)
;; (global-set-key (kbd "C-h f") #'helpful-callable)
;; (global-set-key (kbd "C-h v") #'helpful-variable)
;; (global-set-key (kbd "C-h k") #'helpful-key)
;; (global-set-key (kbd "C-h x") #'helpful-command)

#+END_SRC

* HIGHLIGHT TODO
Adding highlights to TODO and related words.

#+BEGIN_SRC emacs-lisp

(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))

#+END_SRC

* LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

#+BEGIN_SRC emacs-lisp

(use-package php-mode)

 #+END_SRC

** Python

* LAPTOP CONFIG
#+BEGIN_SRC emacs-lisp

;; ;; Garbage Collection: Optimize garbage collection to improve performance.
;; (setq gc-cons-threshold 100000000)
;; (add-hook 'focus-out-hook 'garbage-collect)

;; ;; desktop-save-mode saves the state of your Emacs session, including open buffers and their positions.

;; ;; Enable desktop save mode
;; (desktop-save-mode 1)

;; Set the directory to save the session
;; (setq desktop-dirname "~/.config/emacs_test/save_desktop/"
;;       desktop-base-file-name "emacs-save-desktop"
;;       desktop-base-lock-name "lock"
;;       desktop-path (list desktop-dirname)


;;    desktop-save t
;;      desktop-files-not-to-save "^$" ; Reload tramp paths
      ;; desktop-load-locked-desktop t
      ;; desktop-auto-save-timeout 30)

;; Create the directory if it doesn't exist
;;(make-directory desktop-dirname t)


;; ;; Save desktop every 30 seconds
;;(run-with-idle-timer 30 t 'desktop-save-in-desktop-dir)

;; ;; auto-save-visited-mode saves your buffers periodically.
;; ;; Auto-save buffers every 20 seconds.
;;(auto-save-visited-mode 1)
;;(setq auto-save-visited-interval 20)

#+END_SRC

* MODELINE

#+BEGIN_SRC emacs-lisp

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 25     ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-buffer-name t
        doom-modeline-minor-modes t
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name

#+END_SRC

* Modern Minibuffer Packages
The `vertico' package applies a vertical layout to the minibuffer.

#+BEGIN_SRC emacs-lisp

(use-package vertico
  :config
  (setq vertico-cycle t)
  (setq vertico-resize nil)
  (vertico-mode 1))

;; The `marginalia' package provides helpful annotations next to
;; completion candidates in the minibuffer.  The information on
;; display depends on the type of content.  If it is about files, it
;; shows file permissions and the last modified date.  If it is a
;; buffer, it shows the buffer's size, major mode, and the like.
(use-package marginalia
  :config
  (marginalia-mode 1))

;; The `consult' package provides lots of commands that are enhanced
;; variants of basic, built-in functionality.  One of the headline
;; features of `consult' is its preview facility, where it shows in
;; another Emacs window the context of what is currently matched in
;; the minibuffer.  Here I define key bindings for some commands you
;; may find useful.  The mnemonic for their prefix is "alternative
;; search" (as opposed to the basic C-s or C-r keys).
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:22e97b4c-d88d-4deb-9ab3-f80631f9ff1d
(use-package consult
  :bind (;; A recursive grep
         ("M-s M-g" . consult-grep)
         ;; Search for files names recursively
         ("M-s M-f" . consult-find)
         ;; Search through the outline (headings) of the file
         ("M-s M-o" . consult-outline)
        ;; Search the current buffer
         ("M-s M-l" . consult-line)
         ;; Switch to another buffer, or bookmarked file, or recently
         ;; opened file.
         ("M-s M-b" . consult-buffer)))
 (recentf-mode 1) ;; activate history

;; The `orderless' package lets the minibuffer use an out-of-order
;; pattern matching algorithm.  It matches space-separated words or
;; regular expressions in any order.  In its simplest form, something
;; like "ins pac" matches `package-menu-mark-install' as well as
;; `package-install'.  This is a powerful tool because we no longer
;; need to remember exactly how something is named.
;;
;; Note that Emacs has lots of "completion styles" (pattern matching
;; algorithms), but let us keep things simple.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:7cc77fd0-8f98-4fc0-80be-48a758fcb6e2
(use-package orderless
  :config
  (setq completion-styles '(orderless basic)))


;; The `embark' package lets you target the thing or context at point
;; and select an action to perform on it.  Use the `embark-act'
;; command while over something to find relevant commands.
;;
;; When inside the minibuffer, `embark' can collect/export the
;; contents to a fully fledged Emacs buffer.  The `embark-collect'
;; command retains the original behaviour of the minibuffer, meaning
;; that if you navigate over the candidate at hit RET, it will do what
;; the minibuffer would have done.  In contrast, the `embark-export'
;; command reads the metadata to figure out what category this is and
;; places them in a buffer whose major mode is specialised for that
;; type of content.  For example, when we are completing against
;; files, the export will take us to a `dired-mode' buffer; when we
;; preview the results of a grep, the export will put us in a
;; `grep-mode' buffer.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:61863da4-8739-42ae-a30f-6e9d686e1995
(use-package embark
  :bind (("C-." . embark-act)
         :map minibuffer-local-map
         ("C-c C-c" . embark-collect)
         ("C-c C-e" . embark-export)))

;; The `embark-consult' package is glue code to tie together `embark'
;; and `consult'.
(use-package embark-consult
  :ensure t)

;; The `wgrep' packages lets us edit the results of a grep search
;; while inside a `grep-mode' buffer.  All we need is to toggle the
;; editable mode, make the changes, and then type C-c C-c to confirm
;; or C-c C-k to abort.

(use-package prescient
  :config
  (prescient-persist-mode 1))

(use-package vertico-prescient
  :after (vertico prescient )
  :config
  (vertico-prescient-mode 1))

(use-package savehist
    :init
    (savehist-mode ))
(setq history-length 25)

;; https://github.com/minad/vertico/issues/81
;; (eval-after-load 'vertico
;;    '(general-define-key :keymaps '(vertico-map)
;;       "C-J"      #'vertico-next-group
;;       "C-K"      #'vertico-previous-group
;;       "C-j"      #'vertico-next
;;       "C-k"      #'vertico-previous))

#+END_SRC

* MINIBUFFER ESCAPE
By default, Emacs requires you to hit ESC three times to escape quit the minibuffer

#+BEGIN_SRC emacs-lisp

(global-set-key [escape] 'keyboard-escape-quit)

#+END_SRC

* MOVE WINDOWS

#+BEGIN_SRC emacs-lisp

(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win)
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)

(error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

#+END_SRC

* NEOTREE

#+BEGIN_SRC emacs-lisp

(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 55
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action)
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))

#+END_SRC

* ORG MODE
** Diminish Org Indent Mode
Removes "Ind" from showing in the modeline.

#+BEGIN_SRC emacs-lisp

(eval-after-load 'org-indent '(diminish 'org-indent-mode))

#+END_SRC

** Org-Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+END_SRC

** Org Level Headers

#+BEGIN_SRC emacs-lisp

  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
   '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
   '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))

#+END_SRC

** Org-Tempo
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+BEGIN_SRC emacs-lisp

(require 'org-tempo)

#+END_SRC

** Preserve Indentation On Org-Babel-Tangle

#+BEGIN_SRC emacs-lisp

(setq org-src-preserve-indentation t)

#+END_SRC

** Toc-Org
Allows us to create a Table of Contents in our Org docs.

#+BEGIN_SRC emacs-lisp

(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

#+END_SRC

* PDFs
[[https://github.com/vedang/pdf-tools][pdf-tools]] is a replacement of DocView for viewing PDF files inside Emacs.  It uses the =poppler= library, which also means that 'pdf-tools' can by used to modify PDFs.  I use to disable 'display-line-numbers-mode' in 'pdf-view-mode' because line numbers crash it.

#+BEGIN_SRC emacs-lisp

(use-package pdf-tools
  :defer t
  :commands (pdf-loader-install)
  :mode "\\.pdf\\'"
  :bind (:map pdf-view-mode-map
              ("j" . pdf-view-next-line-or-next-page)
              ("k" . pdf-view-previous-line-or-previous-page)
              ("C-=" . pdf-view-enlarge)
              ("C--" . pdf-view-shrink))
  :init (pdf-loader-install)
  :config (add-to-list 'revert-without-query ".pdf"))

(add-hook 'pdf-view-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)
                                                         (blink-cursor-mode -1)
                                                         (doom-modeline-mode -1)))

#+END_SRC

* PERSPECTIVE
[[https://github.com/nex3/perspective-el][Perspetive]] provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers.  Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]] ring, making it easy to work on many separate projects without getting lost in all the buffers.  Switching to a perspective activates its window configuration, and when in a perspective, only its buffers are available (by default).

#+BEGIN_SRC emacs-lisp

(use-package perspective
  :custom
  ;; NOTE! I have also set 'SCP =' to open the perspective menu.
  ;; I'm only setting the additional binding because setting it
  ;; helps suppress an annoying warning message.
  (persp-mode-prefix-key (kbd "C-c M-p"))
  :init
  (persp-mode)
  :config
  ;; Sets a file to write to when we save states
  (setq persp-state-default-file "~/.config/emacs_test/perspective/sessions"))

 ;; Load perspective states if the file exists
  (when (file-exists-p persp-state-default-file)
    (persp-state-load persp-state-default-file))

;; This will group buffers by persp-name in ibuffer.
(add-hook 'ibuffer-hook
          (lambda ()
            (persp-ibuffer-set-filter-groups)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))

;; Automatically save perspective states to file when Emacs exits.
(add-hook 'kill-emacs-hook #'persp-state-save)

#+END_SRC


* PROJECTILE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.  It should be noted that many projectile commands do not work if you have set "fish" as the "shell-file-name" for Emacs.  I had initially set "fish" as the "shell-file-name" in the Vterm section of this config, but oddly enough I changed it to "bin/sh" and projectile now works as expected, and Vterm still uses "fish" because my default user "sh" on my Linux system is "fish".

#+BEGIN_SRC emacs-lisp

(use-package projectile
  :config
  (projectile-mode 1))

  #+END_SRC

* RAINBOW DELIMITERS
Adding rainbow coloring to parentheses.

#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))

#+END_SRC

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.

#+BEGIN_SRC emacs-lisp

(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)

#+END_SRC

* RIPREP

#+BEGIN_SRC emacs-lisp

;; (use-package rg
;;   :bind (("C-c r" . rg-menu))
;;   :config
;;   (rg-enable-menu))

#+END_SRC

* SANE DEFAULT

#+BEGIN_SRC emacs-lisp

(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(setq display-line-numbers-type 'relative) ;; Set relative line numbers  Important!! : This settings needs to set before "enabling global-display-line-numbers-mode"
(global-display-line-numbers-mode 1) ;; Display line numbers
(global-visual-line-mode t)  ;; Enable truncated lines
;;(menu-bar-mode -1)           ;; Disable the menu bar
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(setq use-file-dialog nil)   ;; No file dialog
(setq use-dialog-box nil)    ;; No dialog box
;;(setq pop-up-windows nil)    ;; No popup windows
(pixel-scroll-precision-mode 1) ;; Enable pixel-scroll-precision-mode by default
(add-to-list 'default-frame-alist '(fullscreen . maximized)) ;;Maximize or fullscreen Emacs on startup
 ;; Save Place: Remember the cursor position in files.
 (save-place-mode 1)

#+END_SRC

* SHELLS AND TERMINALS
In my configs, all of my shells (bash, fish, zsh and the ESHELL) require my shell-color-scripts-git package to be installed.  On Arch Linux, you can install it from the AUR.  Otherwise, go to my shell-color-scripts repository on GitLab to get it.
** Eshell

#+BEGIN_SRC emacs-lisp

(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-eshell)) ;; make sure to add here "toggle-init-eshell" to avoid any issues with zsh.

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))

;; Disable line numbers in eshell
(add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode -1)))

#+END_SRC

** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+BEGIN_SRC emacs-lisp

(use-package vterm
:config
(setq shell-file-name "/bin/sh"
      vterm-max-scrollback 5000))

#+END_SRC

** Vterm-Toggle
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+BEGIN_SRC emacs-lisp

(use-package vterm-toggle
  :after vterm
  :config
  ;; When running programs in Vterm and in 'normal' mode, make sure that ESC
  ;; kills the program as it would in most standard terminal programs.
  (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.4))))

#+END_SRC

* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+BEGIN_SRC emacs-lisp

(use-package sudo-edit)

#+END_SRC

* THEMES

** THEMES DOOM
#+BEGIN_SRC emacs-lisp

;; (add-to-list 'custom-theme-load-path "~/.config/emacs_test/themes/")

;; (use-package doom-themes
;;   :config
;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
;;         doom-themes-enable-italic t) ; if nil, italics is universally disabled
;;   ;; Sets the default theme to load!!!
;; ;;  (load-theme 'doom-one t)
;;   ;; Enable custom neotree theme (all-the-icons must be installed!)
;;   (doom-themes-neotree-config)
;;   ;; Corrects (and improves) org-mode's native fontification.
;;   (doom-themes-org-config))
;;   ;; Set line numbers color
;;   (custom-set-faces
;;    '(line-number ((t (:foreground "#A0A0A0"))))
;;    '(line-number-current-line ((t (:foreground "#00CED1" :weight bold)))))

#+END_SRC

** THEMES PROT

#+BEGIN_SRC emacs-lisp

;;(add-to-list 'custom-theme-load-path "~/.config/emacs_test/themes/") ;; Add custom themes directory to the load path
;;(load-file "~/.config/emacs_test/themes/zenburn-theme.el");; Load the theme file
;;(load-theme 'zenburn t) ;; Enable the theme

(use-package modus-themes
  :config
  ;; Enable custom neotree theme (all-the-icons must be installed!)
;;  (doom-themes-neotree-config)

;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil)

  ;; Load the theme of your choice.
  (load-theme 'modus-operandi-tinted :no-confirm)

;; (setq modus-themes-completions
;;       '((matches . (extrabold underline))
;;         (selection . (semibold italic))))

  (define-key global-map (kbd "<f5>") #'modus-themes-toggle))

#+END_SRC

* TLDR

#+BEGIN_SRC emacs-lisp

(use-package tldr)

#+END_SRC

* WHICH-KEY

#+BEGIN_SRC emacs-lisp

(use-package which-key
  ;; :init
  ;;  (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
        which-key-idle-delay 0.3
	  which-key-idle-secondary-delay 0.05 ;; this value needs to be set before the mode is activated.
	  which-key-max-description-length 40
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
	  (which-key-mode 1)

#+END_SRC

* TEST

#+BEGIN_SRC emacs-lisp

(defun reader ()
  (interactive)
  (let ((choices '(("First"  . "Hi!")
                   ("Second" . 'second-choice)
                   ("Third"  . 'third-choice))))
    (alist-get
     (completing-read "Choose: " choices)
     choices nil nil 'message)))

(defun github-code-search ()
  "Search code on github for a given language."
  (interactive)
  (let ((language (completing-read
                   "Language: "
                   '("Emacs Lisp" "Python"  "Clojure" "R")))
        (code (read-string "Code: ")))
    (browse-url
     (concat "https://github.com/search?l=" language
             "&type=code&q=" code))))

(defun dm-search ()
  "Search various search engines."
  (interactive)
  (let ((engine (completing-read
                 "Search Engine: "
                 '("Arch Wiki"
                   "Bing"
                   "Google"
                   "Wikipedia")))
        (query (read-string "Query: ")))
    (if (equal engine "Google")
      (browse-url
       (concat "https://www.google.com/search?q=" query)))))

(defun dt/key-value-completing (choice)
  (interactive
   (list
    (let ((completions '(("1" "One")
                         ("2" "Two")
                         ("3" "Three"))))
      (cadr (assoc (completing-read "Choose: " completions) completions)))))
  (message "You choose `%s'" choice))

;; add custom file for variables
;; see https://systemcrafters.net/emacs-from-scratch/the-best-default-settings/
(setq custom-file (locate-user-emacs-file "~/.config/emacs_test/custom-vars.el"))
(load custom-file 'noerror 'nomessage)


#+END_SRC
